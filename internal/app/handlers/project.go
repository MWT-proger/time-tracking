package handlers

import (
	"fmt"
	"sort"
	"strings"

	"github.com/manifoldco/promptui"
)

// CreateProject - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
func (h *Handlers) CreateProject() {
	prompt := promptui.Prompt{
		Label: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
		Validate: func(input string) error {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
			if input == "" {
				return fmt.Errorf("–∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
			}

			// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏
			if _, exists := h.Projects[input]; exists {
				return fmt.Errorf("–ø—Ä–æ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º '%s' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", input)
			}

			return nil
		},
	}

	name, err := prompt.Run()
	if err != nil {
		h.Logger.Warnf("–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: %v", err)
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	h.Logger.Infof("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: %s", name)

	err = h.ProjectService.CreateProject(h.Projects, name)
	if err != nil {
		h.Logger.Errorf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: %v", err)
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	h.Logger.Infof("–ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: %s", name)
	fmt.Printf("–ü—Ä–æ–µ–∫—Ç '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω\n", name)
}

// ArchiveProject - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
func (h *Handlers) ArchiveProject(projectName string) {
	h.Logger.Infof("–ü–æ–ø—ã—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç: %s", projectName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
	project := h.Projects[projectName]
	if project.StartTime != nil {
		h.Logger.Warnf("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç '%s' —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º", projectName)
		fmt.Printf("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç '%s' —Å –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º\n", projectName)
		return
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Select –≤–º–µ—Å—Ç–æ Prompt
	prompt := promptui.Select{
		Label: fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç '%s'?", projectName),
		Items: []string{"–î–∞", "–ù–µ—Ç"},
	}

	idx, _, err := prompt.Run()
	if err != nil {
		h.Logger.Warnf("–û—Ç–º–µ–Ω–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: %v", err)
		fmt.Println("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		return
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ù–µ—Ç), –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	if idx != 0 {
		h.Logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '%s'", projectName)
		fmt.Println("–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		return
	}

	err = h.ProjectService.ArchiveProject(h.Projects, projectName)
	if err != nil {
		h.Logger.Errorf("–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: %v", err)
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	h.Logger.Infof("–ü—Ä–æ–µ–∫—Ç '%s' –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω", projectName)
	fmt.Printf("–ü—Ä–æ–µ–∫—Ç '%s' —É—Å–ø–µ—à–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω\n", projectName)
}

// RestoreProject - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
func (h *Handlers) RestoreProject(projectName string) {
	h.Logger.Infof("–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –∏–∑ –∞—Ä—Ö–∏–≤–∞: %s", projectName)

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Select –≤–º–µ—Å—Ç–æ Prompt
	prompt := promptui.Select{
		Label: fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç '%s' –∏–∑ –∞—Ä—Ö–∏–≤–∞?", projectName),
		Items: []string{"–î–∞", "–ù–µ—Ç"},
	}

	idx, _, err := prompt.Run()
	if err != nil {
		h.Logger.Warnf("–û—Ç–º–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: %v", err)
		fmt.Println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		return
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–ù–µ—Ç), –æ—Ç–º–µ–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
	if idx != 0 {
		h.Logger.Infof("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ '%s'", projectName)
		fmt.Println("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
		return
	}

	err = h.ProjectService.RestoreProject(h.Projects, projectName)
	if err != nil {
		h.Logger.Errorf("–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: %v", err)
		fmt.Printf("–û—à–∏–±–∫–∞: %v\n", err)
		return
	}

	h.Logger.Infof("–ü—Ä–æ–µ–∫—Ç '%s' –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞", projectName)
	fmt.Printf("–ü—Ä–æ–µ–∫—Ç '%s' —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞\n", projectName)
}

// ChooseProject - –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
func (h *Handlers) ChooseProject() string {
	h.Logger.Debug("–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")

	// –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ
	var activeProjects []string
	var inactiveProjects []string
	var archivedProjects []string

	for name, project := range h.Projects {
		if project.Archived {
			archivedProjects = append(archivedProjects, "üì¶ "+name)
		} else if project.StartTime != nil {
			activeProjects = append(activeProjects, "‚ñ∂ "+name)
		} else {
			inactiveProjects = append(inactiveProjects, "‚èπ "+name)
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
	sort.Strings(activeProjects)
	sort.Strings(inactiveProjects)
	sort.Strings(archivedProjects)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ "–ù–∞–∑–∞–¥", –∑–∞—Ç–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞—Ç–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ, –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –∑–∞—Ç–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ
	options := append([]string{"‚Üê –ù–∞–∑–∞–¥"}, activeProjects...)
	options = append(options, inactiveProjects...)

	if len(archivedProjects) > 0 {
		h.Logger.Debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞")
		options = append(options, "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
		options = append(options, archivedProjects...)
	}

	if len(options) == 1 { // –¢–æ–ª—å–∫–æ –æ–ø—Ü–∏—è "–ù–∞–∑–∞–¥"
		h.Logger.Debug("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞")
		fmt.Println("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤")
		return ""
	}

	prompt := promptui.Select{
		Label: "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç",
		Items: options,
	}

	idx, result, err := prompt.Run()
	if err != nil {
		h.Logger.Warnf("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: %v", err)
		return ""
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–ù–∞–∑–∞–¥" (–∏–Ω–¥–µ–∫—Å 0), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	if idx == 0 {
		h.Logger.Debug("–í—ã–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è '–ù–∞–∑–∞–¥'")
		return ""
	}

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
	if result == "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ" {
		h.Logger.Debug("–í—ã–±—Ä–∞–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å")
		return ""
	}

	// –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
	projectName := strings.TrimPrefix(strings.TrimPrefix(strings.TrimPrefix(result, "‚ñ∂ "), "‚èπ "), "üì¶ ")
	h.Logger.Debugf("–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: %s", projectName)

	return projectName
}

// SelectAndManageProject - –≤—ã–±–æ—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º
func (h *Handlers) SelectAndManageProject() {
	h.Logger.Debug("–ó–∞–ø—É—Å–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º")

	// –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
	projectName := h.ChooseProject()
	if projectName == "" {
		h.Logger.Debug("–ü—Ä–æ–µ–∫—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		return
	}

	project := h.Projects[projectName]
	h.Logger.Debugf("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–º: %s (–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: %v)", projectName, project.Archived)

	// –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º
	for {
		var menuItems []string
		var projectLabel string

		if project.Archived {
			menuItems = []string{
				"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞",
				"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
				"–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
			}
			projectLabel = fmt.Sprintf("–ü—Ä–æ–µ–∫—Ç: %s (–≤ –∞—Ä—Ö–∏–≤–µ)", projectName)
			h.Logger.Debugf("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: %s", projectName)
		} else {
			menuItems = []string{
				"–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
				"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ",
				"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞–º–∏",
				"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞",
				"–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç",
				"–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
			}
			projectLabel = fmt.Sprintf("–ü—Ä–æ–µ–∫—Ç: %s", projectName)
			h.Logger.Debugf("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: %s", projectName)
		}

		prompt := promptui.Select{
			Label: projectLabel,
			Items: menuItems,
		}
		_, cmd, _ := prompt.Run()

		h.Logger.Debugf("–í—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: %s –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s", cmd, projectName)

		switch cmd {
		case "–ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
			h.StartTrackingForProject(projectName)
		case "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ":
			h.StopTrackingForProject(projectName)
		case "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞–º–∏":
			h.ManageSprintsForProject(projectName)
		case "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞":
			h.ShowProjectStatistics(projectName)
		case "–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
			h.ArchiveProject(projectName)
			// –ü–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			return
		case "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞":
			h.RestoreProject(projectName)
			// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
			project = h.Projects[projectName]
			h.Logger.Debugf("–ü—Ä–æ–µ–∫—Ç %s –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è", projectName)
		case "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
			h.Logger.Debugf("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ %s", projectName)
			return
		}
	}
}

// ShowProjectStatistics - –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É
func (h *Handlers) ShowProjectStatistics(projectName string) {
	project := h.Projects[projectName]

	fmt.Printf("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ \"%s\":\n", projectName)

	// –û–±—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ø—Ä–æ–µ–∫—Ç—É
	var totalProject int
	for _, entry := range project.Entries {
		totalProject += entry.TimeSpent
	}

	fmt.Printf("  –û–±—â–µ–µ –≤—Ä–µ–º—è: %s\n", h.FormatTimeSpent(totalProject))

	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø—Ä–∏–Ω—Ç—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –Ω–∏–º
	if project.Sprints != nil && len(project.Sprints) > 0 {
		fmt.Println("  –°–ø—Ä–∏–Ω—Ç—ã:")

		sprints, _ := h.ProjectService.GetProjectSprints(h.Projects, projectName)
		for _, sprint := range sprints {
			var totalSprint int
			for _, entry := range sprint.Entries {
				totalSprint += entry.TimeSpent
			}

			status := ""
			if sprint.IsActive {
				status = " (–ê–∫—Ç–∏–≤–Ω—ã–π)"
			}

			fmt.Printf("    %s%s: %s\n", sprint.Name, status, h.FormatTimeSpent(totalSprint))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–µ–∫—Ç–∞
	fmt.Println("  –ó–∞–ø–∏—Å–∏:")
	for _, entry := range project.Entries {
		fmt.Printf("    %s - %s: %s\n", entry.Date, h.FormatTimeSpent(entry.TimeSpent), entry.Description)
	}
}
